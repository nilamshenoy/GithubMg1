public with sharing class Data_Migration_Controller {
    
    public static String clientId = '3MVG96mGXeuuwTZiWC9..zmqn01MFeOT7Q1G961iMA9Ov7fHsSkCK0U3stzrIiwJ3CENedJaD7zMcYE_IAAf5';
    public static String clientSecret = 'DCC4AC09B79FF6810B78AC576C38EC73B87EBEAC638E7E51DB436D29024510DE';
    //public static String username = 'preci.user@infosys.com.mvpdevprci';
    //public static String password = 'Daimler@123';
    public static String token='';
    public class deserializeResponse {
        public String id;
        public String accessToken;
    }
    @AuraEnabled(cacheable=true)
    public static string sandboxname() {
        String myHostStr = System.Url.getSalesforceBaseUrl().getHost();
        Integer index1=myHostStr.indexOf('--');
        Integer index2=myHostStr.indexOf('.my');
        myHostStr=myHostStr.substring(index1+2,index2);
       
        return myHostStr;
    }
    @AuraEnabled
    public static string ReturnAccessToken (Data_Migration_Controller account) {
        //String reqbody  = 'grant_type=password' + '&client_id='+clientId +'&client_secret='+clientSecret + '&username='+username + '&password='+password;
        Http h = new Http();
        
        HttpRequest req = new HttpRequest();
        //req.setBody(reqbody);
        req.setMethod('GET');
        string ep;
        req.setEndpoint('https://test.salesforce.com/services/oauth2/authorize?client_id=3MVG96mGXeuuwTZgYskh3rLKXGJuwthrV_vEJmPtzbixhYFOas8xx7g4D9LJHOOMTsRV59T1Q9JHNtksRg9s5&redirect_uri=https://daimlereu--onecrmdev--c.cs84.visual.force.com/apex/RedirectingPage&response_type=code');
        
        HttpResponse res = h.send(req);
        while (res.getStatusCode() == 302) {
        req.setEndpoint(res.getHeader('Location'));
        res = new Http().send(req);
        ep=req.getEndpoint();
        system.debug('end point url '+ep);
        }
        system.debug('response is '+res.getBody());
        //deserializeResponse response = (deserializeResponse)JSON.deserialize(res.getbody(),deserializeResponse.class);
        //system.debug('@@@@accessToken@@'+response );
        //token=response.accessToken;
        return ep;
    }
    
    @AuraEnabled(cacheable=true)
    public static Map<String,String> getMetadataRecord(){
        List<Data_Migration_Mapping__mdt> metadataRec=new List<Data_Migration_Mapping__mdt>();
        Map<String,String> returnStr=new Map<String,String>();
        metadataRec=[Select Label,DeveloperName from Data_Migration_Mapping__mdt order by Label];
        for(Data_Migration_Mapping__mdt dmm:metadataRec){
            returnStr.put(dmm.Label,dmm.DeveloperName);
        }
        system.debug('returnStr'+returnStr);
        return returnStr;
        
    }
    /* @AuraEnabled(cacheable=true)
    public static List<Data_Migration_Mapping__mdt> getMetadataRecordDemo() {
        List<Data_Migration_Mapping__mdt> metadataRec=new List<Data_Migration_Mapping__mdt>();
        List<Data_Migration_Mapping__mdt> returnStr=new List<Data_Migration_Mapping__mdt>();
        metadataRec=[Select Label,DeveloperName,Dependent_Objects__c from Data_Migration_Mapping__mdt];
        
        system.debug('returnStr'+metadataRec);
        return metadataRec;
        
    }
    @AuraEnabled
    public static Map<String,List<String>> getFieldsForObject(List<String> selected) {
       system.debug('selected'+selected);
        Map<String,List<String>> objectWithField=new Map<String,List<String>>();
        List<Data_Migration_Mapping__mdt> dvList=[Select Label,DeveloperName from Data_Migration_Mapping__mdt where DeveloperName in :selected];
        Map<String,String> newMap= new Map<String,String>();
        for(Data_Migration_Mapping__mdt d:dvList){
            newMap.put(d.DeveloperName,d.Label);
        }
        system.debug('dvList'+dvList);
        List<Data_Migration__mdt> dmlist=[Select Fields__c,DeveloperName from Data_Migration__mdt where DeveloperName in :selected ];
        system.debug('dmlist'+dmlist);
        //List<String> fields=new List<String>();
        for(Data_Migration__mdt dm:dmList){
            List<String> fields=new List<String>();
            fields=dm.Fields__c.split(',');
            
            objectWithField.put(newMap.get(dm.DeveloperName), fields);
            
        }
        system.debug('objectWithField'+objectWithField);
        return objectWithField;
    }*/
    
    
     @AuraEnabled
    public static void setMetadataRecord(List<String> selected, String accessToken, String endpoint) {
        system.debug('selected'+selected);
        system.debug('vdasasas----'+endpoint);
        List<Data_Migration_Mapping__mdt> metadataRec=[select id,label,developername,Dependent_Objects__c from Data_Migration_Mapping__mdt where developername in :selected];
        Map<String,List<String>> mapObjects=new Map<String,List<String>>();
        LIst<String> objectList=new List<String>();
        for(Data_Migration_Mapping__mdt data:metadataRec){
            system.debug('data'+data);
            List<String> strList=new List<String>();
            if(data.Dependent_Objects__c!=null)
            {
            strList=data.Dependent_Objects__c.split(',');
            }
            for(String str:strList){
                if(!objectList.contains(str)){
                    objectList.add(str);
                }
            }  
        }
        system.debug('objectList'+objectList);
        //Data_Migration_Controller gettoken=new Data_Migration_Controller();
        //ReturnAccessToken(gettoken);
        system.debug('Test Here');
        
        database.executeBatch(new Core_DataMigrationBatch(objectList[0],objectList,accessToken,endpoint),50);
            }
    /*@AuraEnabled
    public static void gettoken(string result)
    {
        system.debug('the token here is'+result);
    }
    @AuraEnabled
    public static void goToBatch(Map<String,List<String>> objfieldMap) {
        system.debug('map obj field'+objfieldMap);
        set<string> objects=objfieldMap.keyset();
         LIst<String> objectList=new List<String>();
        List<Data_Migration_Mapping__mdt> dvList=[Select Label,DeveloperName,Dependent_Objects__c from Data_Migration_Mapping__mdt where Label in :objects];
         for(Data_Migration_Mapping__mdt data:dvList){
            system.debug('data'+data);
             List<String> strList=new List<String>();
            if(data.Dependent_Objects__c!=null)
            {
            strList=data.Dependent_Objects__c.split(',');
            }
            for(String str:strList){
                if(!objectList.contains(str)){
                    objectList.add(str);
                }
            }  
        }
        system.debug('objectList'+objectList);
         //database.executeBatch(new Core_DataMigrationBatch(objectList[0],objectList,token,objfieldMap),50);
    }*/
  

}
