public class Core_DataMigrationBatch implements Database.Batchable<sObject>, Database.Stateful ,Database.AllowsCallouts {
    List<Data_Migration__mdt> fieldMappingList=new List<Data_Migration__mdt>();
    List<String> fieldList=new List<String>();
    Data_Migration__mdt objectseq=new Data_Migration__mdt();
    Integer maxseqno;
    Integer seqno;
    String fields;
    String objectName;
    String fieldmap;
    Integer count;
    String accessToken;
    List<String> objectList1=new List<String>();
    List<String> fieldMapList=new List<String>();
    Map<String,String> fieldsMapObject=new Map<String,String>();
    Map<String,List<String>> fieldswithJSONMap=new Map<String,List<String>>();
     Map<string,String> sourceidwithtargetid=new Map<string,string>();
    Map<String,List<string>> objectfieldsmap=new Map<String,List<string>>();
    Map<string,String> duplicatesourceidwithtargetid=new Map<string,string>();
    string objectnamemet;
    String allfields;
    String endpoint;
    String objLabel;
    public Core_DataMigrationBatch(String objectName1,List<String> objectList,String token, String endpointURL )
    {	
        endpoint=endpointURL;
        accessToken=token;
        //accessToken='8xpUqaCTvCBYeukGOzHg9Gu6';
        objectnamemet=objectName1;
        allfields='';
        //objectfieldsmap=objectwithfieldsmap;
        count=objectList.indexOf(objectname1);
        objectList1=objectList;
        List<Data_Migration__mdt> fieldMappingList = [select id,Label,FieldMapping__c,FieldName__c,Field_To_Map__c, Object_Name__c, Fields__c, Query__c,Sequence_number__c,Max_Seq_no__c,ProfileOrRecordtype__c from Data_Migration__mdt where developerName=:objectName1  ];
        String filtercriteria='';
        string targetOrgId='00D1x0000008gdH';
        
       // string query='select sourceid__c,targetid__c,Obj_Name__c from Data_Storage__b';
        //Vemana
        string query='select SourceId__c,TargetId__c,Obj_Name__c,SourceOrgId__c,TargetOrgId__c from Data_StorageApp__b';
        
        filtercriteria ='  where TargetOrgId__c=:targetOrgId';
        /*if(fieldMappingList[0].FieldMapping__c!=null)
        {
            List<String> objectslist=fieldMappingList[0].FieldMapping__c.split(',');
            system.debug('objectslist '+objectslist);
            filtercriteria='where Obj_Name__c in :objectslist';
        }*/
        query=query+filtercriteria;
        //List<Data_Storage__b> bigobjectdata=database.query(query);
        List<Data_StorageApp__b> bigobjectdata=database.query(query);
       sourceidwithtargetid=new Map<string,String>();
        duplicatesourceidwithtargetid=new Map<string,String>();
       //for(Data_Storage__b db:bigobjectdata)
       for(Data_StorageApp__b db:bigobjectdata)
       {
           if(!sourceidwithtargetid.containskey( db.SourceId__c))
           {
               sourceidwithtargetid.put(db.SourceId__c,db.TargetId__c);
           }
           else
           {
               duplicatesourceidwithtargetid.put(db.SourceId__c,db.TargetId__c);
           }
       }
        objectseq=fieldMappingList[0];
        maxseqno=(Integer)objectseq.Max_Seq_no__c;
        seqno=(Integer)objectseq.Sequence_number__c;
        fields=objectseq.Fields__c;
        objectName=objectseq.Object_Name__c;
        objLabel=objectseq.Label;
        
        //to get all fields of Object
        /*SObjectType accountType = Schema.getGlobalDescribe().get(objectName);
		Map<String,Schema.SObjectField> mfields = accountType.getDescribe().fields.getMap();
        for(String sobjf:mfields.keyset()){
            allfields=allfields+mfields.get(sobjf)+',';
        }
        allfields=allfields.removeEnd(',');
        system.debug('allfields'+allfields);*/
        
        //List<Data_Migration__mdt> datamappinglist=[select id,FieldName__c,Field_To_Map__c,Object_Name__c from Data_Migration__mdt where Object_Name__c=:objectName];
        
        setfiledMapping(fieldMappingList);
        fieldList=fields.split(',');
        system.debug('fieldList'+fieldList);
       /* if(objectseq.ProfileOrRecordtype__c!=null)
        {
        fieldMap=objectseq.ProfileOrRecordtype__c;
        fieldMapList=fieldMap.split(',');
        if(!fieldMapList.isEmpty()){
            List<String> splitstr=new List<String>();
            for(String str:fieldMapList){
                splitstr=str.split(':');
                fieldsMapObject.put(splitstr[0],splitstr[1]);
            }
            system.debug('fieldsMapObject'+fieldsMapObject);
        }
    }*/
        
    }
    private void setfiledMapping(List<Data_Migration__mdt> datamappinglist)
    {
        for(Data_Migration__mdt dm:datamappinglist)
        {
            if(!fieldswithJSONMap.containsKey(dm.FieldName__c))
            {	
                if(dm.FieldName__c!=null){
                    List<string> fieldslist=new List<String>();
                    string fieldname=dm.FieldName__c;
                    system.debug('fieldname'+fieldname);
                    List<string> objectandfield=fieldname.split('\\.');
                    system.debug('objectandfield'+objectandfield);
                    fieldslist.add(objectandfield[0]);
                    fieldslist.add(objectandfield[1]);
                    fieldslist.add(dm.Field_To_Map__c);
                    fieldswithJSONMap.put(dm.FieldName__c,fieldslist);
                    system.debug('fieldswithJSONMap'+fieldswithJSONMap);
                }
            }
        }
    }
    public Database.QueryLocator start(Database.BatchableContext bc){
        String query=objectseq.query__c;
        query=query.replace('$$fields$$',fields);
        //query=query+ ' Limit 1';
        return Database.getQueryLocator(query);
        
    }
    public void execute (Database.BatchableContext bc, List<sObject> scope){
        
        System.debug('In Execute '+scope.size());
        System.debug('In Execute '+scope);
         JSONGenerator gen1 = JSON.createGenerator(true);  
        gen1.writeStartObject();
        gen1.writeStringField('ObjectName', objectName);
        gen1.writeNumberField('Sequence', 1);
        gen1.writeStringField('Operation', 'insert');
        gen1.writeFieldName('Data');
		gen1.writeStartArray();
        for(Sobject sobj:scope){
            Map<String, Object> fieldsToValue = sobj.getPopulatedFieldsAsMap();
            system.debug('fieldsToValue'+fieldsToValue);
            
          if(!sourceidwithtargetid.containsKey(fieldsToValue.get('Id').toString()))
           {
            //system.debug('UniqueValues----'+sourceidwithtargetid.get(fieldsToValue.get('Id').toString())+'Record ID'+fieldsToValue.get('Id').toString());
             
               gen1.writeStartObject();
            for(String str:fieldList){
                system.debug('str'+str);
                system.debug('check'+fieldsToValue.get(str));
                system.debug('check1'+sourceidwithtargetid);
                if(fieldswithJSONMap.containsKey(str))//fieldswithJSONMap Recordtype,name,recordtypeId
                {
                    
                    system.debug('shksdkkdssdd-----'+(fieldswithJSONMap.get(str)[0]));//null
                    sobject sobjmap=(sobject)fieldsToValue.get(fieldswithJSONMap.get(str)[0]);//Recordtype
                    system.debug('sobjmap'+sobjmap);
                    system.debug('fieldswithJSONMap.get(str)[0]'+fieldswithJSONMap.get(str)[0]);
                    system.debug('fieldsToValue.get(fieldswithJSONMap.get(str)[0])'+fieldsToValue.get(fieldswithJSONMap.get(str)[0]));
                    Map<String,Object> fieldstovalueformapping=sobjmap.getPopulatedFieldsAsMap();
                    system.debug('fieldstovalueformapping'+fieldstovalueformapping);
                    gen1.writeStringField(fieldswithJSONMap.get(str)[2],fieldstovalueformapping.get(fieldswithJSONMap.get(str)[1]).ToString());
                    system.debug('Contains-----'+gen1);
                }
                /*if(str=='Profile.Name'){
                    sobject sobjmap=(sobject)fieldsToValue.get('Profile');
                    Map<String,Object> fieldstovalueformapping=sobjmap.getPopulatedFieldsAsMap();
                    system.debug('fieldstovalueformapping'+fieldstovalueformapping);
                    gen1.writeStringField('ProfileId',fieldstovalueformapping.get('Name').ToString());
                    //system.debug('profile'+fieldsToValue.get('Profile'));
                    //gen1.writeStringField(str, fieldsToValue.get(str).Profile.Name);
                }*/
                /*Code Start: Added by Swapnil to fix duplicate data insert by adding ID in json file*/
                else if(fieldsToValue.get(str)!=null && str=='Id' && sourceidwithtargetid.containskey(fieldsToValue.get(str).toString())){
               		 gen1.writeStringField(str, sourceidwithtargetid.get(fieldsToValue.get(str).toString()));
                    system.debug('Duplicate values---'+gen1);
                }
                /*Code End: Added by Swapnil to fix duplicate data insert by adding ID in json file*/
                else if(fieldsToValue.get(str)!=null && str!='Id' && sourceidwithtargetid.containskey(fieldsToValue.get(str).toString())){
               		 gen1.writeStringField(str, sourceidwithtargetid.get(fieldsToValue.get(str).toString()));
                    system.debug('Not Record id vales-----'+gen1);
                }
                else if(fieldsToValue.get(str)==true || fieldsToValue.get(str)==false){
               		 gen1.writeBooleanField(str, (Boolean)fieldsToValue.get(str));
                    system.debug('gen1gen1gen1gen1-----'+gen1);
                }
                else if(fieldsToValue.get(str)!=null){
                    gen1.writeStringField(str, fieldsToValue.get(str).ToString());
                    system.debug('Not Null condition-----'+gen1);
                }
                system.debug('vemmasmpmsas----'+fieldsToValue.get(str));
            }
            
            gen1.writeEndObject();
          }
           else
              {
                  system.debug('DuplicateVaues----'+sourceidwithtargetid.get(fieldsToValue.get('Id').toString())+''+fieldsToValue.get('Id').toString());
              }
                   
        }
        gen1.writeEndArray();
        
        /*gen1.writeFieldName('FieldMapping');
         gen1.writeStartObject();
        for(String str:fieldsMapObject.keySet()){
            gen1.writeStringField(str,fieldsMapObject.get(str));
        }*/
        system.debug('Vemanagen1---'+gen1);
        String pretty = gen1.getAsString();
        system.debug('pretty '+pretty);
        system.debug('access token '+accessToken);
        if(accessToken != null) {
            String endPoint = endpoint+'services/apexrest/v1/getAccounts1';
            system.debug('endPointendPoint---'+endPoint);
            Http h2 = new Http();
            HttpRequest req1 = new HttpRequest();
            req1.setTimeout(120000);
            req1.setHeader('Authorization','Bearer ' + accessToken);
            req1.setHeader('Content-Type','application/json');
            req1.setHeader('accept','application/json');
            req1.setMethod('POST');
            req1.setEndpoint(endPoint);
            req1.setBody(pretty);
            HttpResponse res1 = h2.send(req1);
            Map<String,String> mapId=new Map<String,String>();
            system.debug('ResponseCode---'+res1);
            system.debug('res1'+res1.getBody());
            Map<string,Object> response=(Map<string,Object>)JSON.deserializeUntyped(res1.getBody());
            //List<Data_Storage__b> dbList=new List<Data_Storage__b>();
            List<Data_StorageApp__b> dbList=new List<Data_StorageApp__b>();
            
            //List<String> idList=response.split(',');
            system.debug('response '+response);
            for(String str:response.keyset()){
               system.debug('Big object is executed---');
                //Data_Storage__b db=new Data_Storage__b();
                Data_StorageApp__b db = new Data_StorageApp__b();
                db.SourceId__c=str;
                db.TargetId__c=response.get(str).tostring();
                db.Obj_Name__c=objectName;
                db.SourceOrgId__c ='00D5E000000A4V5';
                db.TargetOrgId__c ='00D1x0000008gdH';
                dbList.add(db);
                
                //mapId.put(tempList[0],tempList[1]);
                
            }
            system.debug('dbList'+dbList);
            if(!dbList.isEmpty()){
                system.debug('insert big object');
                Database.insertImmediate(dbList);
            } 
            
            
        
        //RestContext.response.responseBody = Blob.valueOf(pretty);
        }
        
        
        
    }
    public void finish (Database.BatchableContext bc){ 
        count=count+1;
        if(count<objectList1.size())
        {
               List<Data_Migration_pe__e> dmpe=new List<Data_Migration_pe__e>();
      
       		integer per=(count)*100/objectList1.size();
            dmpe.add(new Data_Migration_pe__e(ObjectName__c=objLabel,Completion_Percent__c=per));
          
           List<Database.SaveResult> results = EventBus.publish(dmpe);
            system.debug('From Finish If '+objectList1[count-1]);
            System.debug('****results'+results);
            for (Database.SaveResult result : results) {
                if (!result.isSuccess()) {
                    for (Database.Error error : result.getErrors()) {
                        System.debug('Error returned: ' +
                                     error.getStatusCode() +' - '+
                                     error.getMessage());
                    }
                }
            }
            Database.executeBatch(new Core_DataMigrationBatch(objectList1[count],objectList1,accessToken,endpoint),50);
        }
        else
        {
            List<Data_Migration_pe__e> dmpe=new List<Data_Migration_pe__e>();
      
       
            dmpe.add(new Data_Migration_pe__e(ObjectName__c='Data migration is completed'));
           
           
           List<Database.SaveResult> results = EventBus.publish(dmpe);
            system.debug('From Finish else '+objectList1[count-1]);
            System.debug('****results'+results);
            for (Database.SaveResult result : results) {
                if (!result.isSuccess()) {
                    for (Database.Error error : result.getErrors()) {
                        System.debug('Error returned: ' +
                                     error.getStatusCode() +' - '+
                                     error.getMessage());
                    }
                }
            }
        }
        system.debug('in finish');
    }

}
